name: Build, Test , Deploy Pipeline

on:
  push:
    branches:
      - main


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Install Deps
        run: pip install -r requirements.txt

      - name: Build Docker Image
        run: |
          docker build -t flask-app:latest .

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Run Tests
        run: python -m unittest test_app.py

  push-to-dockerhub:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: docker login
        # env:
        #   DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        #   DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p  ${{secrets.DOCKER_PASSWORD}}

      - name: Build Docker Image
        run: |
            docker build -t flask-app:latest .
      - name: Tag Docker Image
        run: docker tag flask-app:latest ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
        
      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
        
  deploy:
    runs-on: ubuntu-latest
    needs: push-to-dockerhub
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Resource Group exists
        id: check_rg
        run: |
            rg_exists=$(az group exists --name myResourceGroup)
            echo "::set-output name=exists::$rg_exists"
      - name: Create Resource Group
        if: steps.check_rg.outputs.exists == 'false'
        run: az group create --name myResourceGroup --location eastus
  
      - name: Check if ACR exists
        id: check_acr
        run: |
            acr_exists=$(az acr show --name kinderdllflaskapp --query name -o tsv 2>/dev/null || echo "false")
            echo "::set-output name=exists::$acr_exists"
      - name: Create Azure Container Registry
        if: steps.check_acr.outputs.exists == 'false'
        run: | 
          az acr create --resource-group myResourceGroup --name kinderdllflaskapp --sku Basic
      
      - name: Enable admin access for Azure Container Registry
        run: az acr update --resource-group myResourceGroup --name kinderdllflaskapp --admin-enabled true

      - name: Check if ACR is created
        id: check_acr_created
        run: |
          while true; do
            acr_created=$(az acr show --name kinderdllflaskapp --query name -o tsv 2>/dev/null || echo "false")
            if [ "$acr_created" = "false" ]; then
              echo "ACR does not exist, sleeping for 30 seconds..."
              sleep 30
            else
              echo "::set-output name=exists::$acr_created"
              break
            fi
          done
      
      - name: Update creds
        run : |
          acr_username=$(az acr credential show --name kinderdllflaskapp --query username -o tsv)
          acr_password=$(az acr credential show --name kinderdllflaskapp --query passwords[0].value -o tsv)
          # Update GitHub Secrets
          echo "::add-mask::$acr_password" # Mask the password in logs
          echo "ACR_USERNAME=$acr_username" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$acr_password" >> $GITHUB_ENV
          
      - name: Build and Push Docker Image to ACR
        run: |
          docker build -t flask-app:latest .
          docker tag flask-app:latest kinderdllflaskapp.azurecr.io/flask-app:latest
          docker login kinderdllflaskapp.azurecr.io -u $ACR_USERNAME -p $ACR_PASSWORD
          docker push kinderdllflaskapp.azurecr.io/flask-app:latest

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy ACR Image to Azure Container Instance
        run: |
          az container create --resource-group myResourceGroup --name kinderdll-flask-app --image kinderdllflaskapp.azurecr.io/flask-app:latest --cpu 1 --memory 1.5 --registry-login-server kinderdllflaskapp.azurecr.io --registry-username $ACR_USERNAME --registry-password $ACR_PASSWORD --dns-name-label kinderdll-flask-app --ports 9000